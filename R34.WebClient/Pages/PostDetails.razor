@page "/post/{Id:int}"
@using R34.Models;

@if (_post is null)
{
    <div>
        @if (_loading)
        {
            <div class="text-3xl">Loading</div>
        }
        else
        {
            <div class="text-3xl">Post does not exist</div>
        }
       
    </div>
}
else
{
    <div class="grid sm:grid-cols-2 gap-2">
        <div class="flex-grow-0">
            <img class="rounded" src="@_post.FileUrl"/>
        </div>
        <div>
            <div class="text-3xl">Creator Id @_post.CreatorId</div>
            <div class="text-2xl">Created at: @_post.CreatedAt</div>
            <div class="">
                <TagsComponent Post="@_post"/>
            </div>
            
        </div>
        <div>
            <div class="text-3xl">Details</div>

            <p>Rating: @_post.Rating</p>
            <p>Score: @_post.Score</p>
            <p>File url: <a href="@_post.FileUrl" target="_blank">@_post.FileUrl</a></p>
            <p>Preview url: <a href="@_post.PreviewUrl" target="_blank">@_post.PreviewUrl</a></p>
            <p>Sample url: <a href="@_post.SampleUrl" target="_blank">@_post.SampleUrl</a></p>
            <p>Source url:  <a href="@_post.Source" target="_blank">@_post.Source</a></p>

            <hr/>

            <p>Has comments: @_post.HasComments</p>
            <p>Hash: @_post.Hash</p>
            <p>Status: @_post.Status</p>
        </div>
        <div>
            @if (_comments.Count() == 0)
            {
                <div class="text-3xl">
                    No comments
                </div>
            }
            else
            {
                <CommentsPresenter Comments="@_comments"/>
            }

        </div>
    </div>
    
    
        
}


@code {
    bool _loading = true;
    [Parameter] public int Id { get; set; }
    [Inject] ILogger<PostDetails> Logger { get; set; }
    Post? _post;
    Rule34 _rule34 = new();
    IEnumerable<Comment> _comments;
    protected override async Task OnInitializedAsync()
    {
        _post = await _rule34.GetPost(Id);
        _comments = await _rule34.GetComments(Id);

        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }
}
