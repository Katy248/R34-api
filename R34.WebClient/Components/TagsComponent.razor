@using R34.Models;
<div class="text-xl">Tags:</div>
@if (_tags.Count == 0)
{
    <div aria-busy="true">
        Loading
    </div>
}
else
{
    <div class="flex flex-col gap-4 pt-4">
        <TagsPresenter 
            Title="Copyright"
            Tags="@(_tags.Where(tag => tag.Type == (int)TagType.Copyright))"/>
        <TagsPresenter 
            Title="Caharacters"
            Tags="@(_tags.Where(tag => tag.Type == (int)TagType.Character))"/>
        <TagsPresenter 
            Title="General"
            Tags="@(_tags.Where(tag => tag.Type == (int)TagType.General))"/>
        <TagsPresenter 
            Title="Artist"
            Tags="@(_tags.Where(tag => tag.Type == (int)TagType.Artist))"/>
        <TagsPresenter 
            Title="Meta"
            Tags="@(_tags.Where(tag => tag.Type == (int)TagType.Meta))"/>
    </div>
    @* <article>
        @foreach (var tag in _tags.Where(tag => tag.Type == 2))
        {
            <a href="/search/@tag.Name/0">@(tag.Name + "\t")</a>
        }
    </article> *@
}

@code {
    [Inject] ILogger<TagsComponent> Logger { get; set; }

    [Parameter] public Post Post { get; set; }
    Rule34 _rule34 = new();
    List<Tag> _tags = new();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await foreach (var tag in GetTags(Post))
            {
                _tags.Add(tag);
                StateHasChanged();
            }
            await base.OnInitializedAsync();
        }
        catch (Exception e)
        {
            Logger.LogWarning(e, "");
        }
    }

    async IAsyncEnumerable<Tag> GetTags(Post post)
    {
        foreach (var postTag in post.TagsSequence)
        {
            var tag = await _rule34.GetTag(name: postTag);
            if (tag is not null)
                yield return tag;
        }
    }
}
